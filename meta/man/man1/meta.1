.\"
.\" meta.1
.\"
.\" Process this file with
.\" groff -man -Tascii foo.1
.\"

.\" title and header definition
.TH META 1 "Joint Genomics Institute Metagenomics Software" Linux "Commandline Tools"
.\" section NAME
.SH NAME
meta \- commandline tool for launching metagenomics analysis on a local hadoop cluster.
.SH SYNOPSIS
.B meta [-d] [-? | --help]
.I command
.I command_options
.B
.SH DESCRIPTION
.B meta
commandline tool provides a convienient wrapper for launching hadoop applications specific for gene-centric metagenomics
pipeline.
.SH OPTIONS
.IP "-? | --help"
print usage and exit.
.IP -d
debug mode, print additional messages to stdout.
.SH COMMANDS
.IP contigkmer
initializes the system
.IP blaster
makes connection and quits (useful to make sure connection information is correct).
.IP dereplicate
lists the users or projects stored in the gama server (optionly limit by 

.SH CONFIGURATION
Set
.I $META_HOME
to point to the location of the meta software. And Set
.I $HADOOP_CLASSPATH
to point to
.I $META_HOME/conf
The conf directory should have various site-specific application properties or setting, such as the location
of various executables, the number of maps to partition the job into, the amount of memory etc.  These settings
also provide defaults for various program options.  You can override these settings and options by adding
properties in your
.I ~/.meta-prefs
text file. 
gama libraries in the groovy CLASSPATH or in 
.I ~/.groovy/lib/
in particular needs gamalib, cog-jglobus, cryptix-asn1, cryptix32, puretls,
cryptix, jce-jdk13-125.
.SH PREFERENCES
Parameters can be specified in a per-site configuration file, or a per-user preferences file
.I ~/.meta-prefs
that is loaded on startup.  The per-user configuration will override the values in the per-site
configuration.  In most cases, you won't need to have a per-user preferences.

.SS General Hadoop Parameters:


.IP mapred.min.split.size
defines the minimum size in bytes of each input split. used to control the maximum
number of map tasks.  (eg if file size is 100 bytes and min is 10, then maximum number
of mappers is 10).

.IP mapred.max.split.size
defines the maximum size in bytes of each input split.  used to control the minimum
number of map tasks.

.SS Blast Execution Parameters:
.IP blast.commandline
.IP blast.commandpath
.IP blast.tmpdir
.IP blast.cleanup
.IP blast.effectivedbsize
.IP blast.genedbfilepath
.IP blast.readsarepaired

.SS formatdb

.IP formatdb.commandpath
.IP formatdb.commandline

.SS BLAT

.IP blat.commandline
.IP blat.commandpath
.IP blat.tmpdir
.IP blat.cleanup
.IP blat.skipexecution
.IP blat.paired

.SS ASSEMBLERS

.IP assembler.command
.IP assembler.tmpdir
.IP assembler.cleanup
.IP cap3.commandline
.IP cap3.commandpath
.IP velveth.commandline
.IP velveth.commandpath
.IP velvetg.commandline
.IP velvetg.commandpath

the full hostname of the gama server, overridden with the 
.B -h
commandline option.
.IP gama2.logindn
the DN of the admin account on the ldap server running on the gama host, 
overridden with the 
.B -u 
commandline option.
.IP gama2.loginpasswd
the password of the admin account on the ldap server, overridden with the
.B -p 
commandline option.
.IP gama2.defaultProject
the name of the default project (to make commandline commands a little easier)
.IP gama2.myproxyhostDN 
is the DN of the myproxy server certificate.  This is required to connect to
the myproxy server.  
.P
log4j properties can also be set here.  Examples include:
.IP log4j.logger.com.lila.gama2.Gama=debug,stdout
provides more details of what's going on when commands are executed.
.IP log4j.logger.edu.sdsc.gama2.gamalib.impl.GamaUserManager=debug,stdout
even more details specific to user management.

.SH LOGGING
Additional logging information can be specified using the log4j properties
specified in
.B${HOME}/.meta-prefs
Here are the defaults:
.sp
.RS 4
.nf
\.ft C
# Set root logger level to DEBUG and its only appender to A1.
log4j.rootLogger=info, A1

# A1 is set to be a ConsoleAppender.
log4j.appender.A1=org.apache.log4j.ConsoleAppender

# A1 uses PatternLayout.
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n
\.ft

Additional logging can be added using:
.sp
.RS 4
.nf
\.ft C
log4j.meta=debug  # print debug information regarding the application wrapper
log4j.logger.org.jgi.meta.contigkmer=debug
     # debug information for the contigkmer application
log4j.logger.org.jgi.meta.hadoop.input.FastaLineReader=debug
     # information on hadoop input reader for fasta files
log4j.logger.gov.jgi.meta.hadoop.map.BlastMapperGroupByGene=debug
\.ft

.SH EXAMPLES
The following are common examples:
.sp
.RS 4
.nf
\.ft C
# Create a new project,
% gama create project NEES "http://www\.neesit\.org/"

# create a new site under the NEES project,
% gama create site ucsd -P NEES "{'description': 'the site at UCSD'}"

\.ft

.SH DIAGNOSTICS
error conditions written to output.  if error occurs, command returns 1, otherwise returns 0
.SH BUGS
none (yet! :-)

.SH AUTHOR
Karan Bhatia (karan dot bhatia at gmail dot com)
.SH "SEE ALSO"
.BR groovysh (1)
